{"version":3,"sources":["serviceWorker.js","components/MovieItem.js","components/MovieList.js","components/MovieDetail.js","containers/VideoContainer.js","containers/AppContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","MovieItem","render","Fragment","className","key","onClick","props","handleChangeProps","movie","src","poster_path","alt","title","release_date","substring","React","Component","MovieList","movies","map","id","MovieDetail","Date","toLocaleDateString","year","month","day","overview","VideoContainer","width","height","video_link","TodoContainer","state","currentMovie","componentDidMount","initMovie","apiInfo","apiKey","axios","get","then","res","data","results","setState","forEach","undefined","handleChange","API_KEY","ReactDOM","API_END_POINT","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1e57960.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nexport default class MovieItem extends React.Component {\r\n\trender = () => {\r\n\t\t//console.log(this.props);\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<li className=\"list-group-item\" key={this.key} onClick={() => this.props.handleChangeProps(this.props.movie)}>\r\n\t\t\t\t\t<div className=\"row align-items-center\">\r\n\t\t\t\t\t\t<div className=\"col-md-4\">\r\n\t\t\t\t\t\t\t<img className=\"img-thumbnail\" src={\"https://image.tmdb.org/t/p/w500/\" + this.props.movie.poster_path} alt={this.props.movie.title}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"col-md-8\">\r\n\t\t\t\t\t\t\t<div className=\"\">{this.props.movie.title + \" (\" + this.props.movie.release_date.substring(0,4) + \")\"}</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</li>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\n// component file\r\nimport MovieItem from './MovieItem';\r\n\r\nexport default class MovieList extends React.Component {\r\n\trender = () => {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t{this.props.movies.map(movie => <MovieItem key={movie.id} movie={movie} handleChangeProps={this.props.handleChangeProps} />)}\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\n\r\nexport default class MovieDetail extends React.Component {\r\n\trender = () => {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<h3>Nom du film</h3>\r\n\t\t\t\t<p>{this.props.movie.title}</p>\r\n\t\t\t\t<h3>Sortie</h3>\r\n\t\t\t\t<p>{new Date(this.props.movie.release_date).toLocaleDateString('fr-FR', {year: 'numeric', month: 'long', day: 'numeric' })}</p>\r\n\t\t\t\t<h3>Synopsys</h3>\r\n\t\t\t\t<p>{this.props.movie.overview}</p>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\n\r\nexport default class VideoContainer extends React.Component {\r\n\r\n\trender = () => {\r\n\t\t//console.log(this.props.movie);\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<iframe title=\"trailer\" width=\"720\" height=\"480\" src={\"https://www.youtube.com/embed/\" + this.props.movie.video_link} ></iframe>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport axios from 'axios';\r\n\r\n// component file\r\n//import SearchBar from '../components/SearchBar';\r\nimport MovieList from '../components/MovieList';\r\nimport MovieDetail from '../components/MovieDetail';\r\nimport VideoContainer from './VideoContainer';\r\n\r\nexport default class TodoContainer extends React.Component {\r\n\tstate = {\r\n\t\tmovies: [],\r\n\t\tcurrentMovie: []\r\n\t};\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tthis.initMovie(null, this.props.apiInfo, this.props.apiKey);\r\n\t};\r\n\r\n\tinitMovie = (currentMovie, apiInfo, apiKey) => {\r\n\t\taxios.get(apiInfo).then(res => {\r\n\t\t\tconst movies = res.data.results;\r\n\t\t\tthis.setState({ movies: movies });\r\n\t\t\tif(currentMovie === null) {\r\n\t\t\t\tthis.setState({ currentMovie: movies[0] });\r\n\t\t\t} else {\r\n\t\t\t\tthis.state.movies.forEach(movie => {\r\n\t\t\t\t\tif (movie.id === currentMovie) {\r\n\t\t\t\t\t\tthis.setState({ currentMovie: movie });\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif(currentMovie !== null) {\r\n\t\t\t\taxios.get(\"https://api.themoviedb.org/3/movie/\" + currentMovie.id + \"/videos?api_key=\" + apiKey + \"&language=fr-FR\").then(res => {\r\n\t\t\t\t\tif (res.data.results[0] !== undefined) {\r\n\t\t\t\t\t\tcurrentMovie[\"video_link\"] = res.data.results[0].key;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentMovie[\"video_link\"] = \"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.setState({ currentMovie: currentMovie });\r\n\t\t\t\t\t//console.log(currentMovie);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\thandleChange = (movie) => {\r\n\t\tthis.initMovie(movie, this.props.apiInfo, this.props.apiKey);\r\n\t};\r\n\r\n\t/*searchVideoItem = (title) => {\r\n\t\tconst newTodo = { id: uuidv4(), title: title, completed: false};\r\n\t\tthis.setState({ todos: [...this.state.todos, newTodo]});\r\n\t};*/\r\n\r\n//<SearchBar searchVideoProps={this.searchVideoItem} />\r\n\r\n\trender = () => {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-md-8\">\r\n\t\t\t\t\t\t<VideoContainer movie={this.state.currentMovie} />\r\n\t\t\t\t\t\t<MovieDetail movie={this.state.currentMovie} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-md-4\">\r\n\t\t\t\t\t\t<div className=\"list-container\">\r\n\t\t\t\t\t\t\t<ul className=\"list-group\">\r\n\t\t\t\t\t\t\t\t<MovieList movies={this.state.movies} handleChangeProps={this.handleChange} />\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n// component file\nimport AppContainer from './containers/AppContainer';\n\nconst API_KEY = \"8545c11ef0123a6331b222fcdd453817\";\nconst API_END_POINT = \"https://api.themoviedb.org/3/\";\nconst POPULAR_MOVIES_URL = \"discover/movie?language=fr&sort_by=popularity.desc&include_adult=true&append_to_response=images&page=1&api_key=\";\n\nconst API_INFO = API_END_POINT + POPULAR_MOVIES_URL + API_KEY;\n\nReactDOM.render(<AppContainer apiInfo={API_INFO} apiKey={API_KEY} />, document.getElementById(\"container\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}